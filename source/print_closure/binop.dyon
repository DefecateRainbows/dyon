fn main() {
    assert(\(x: any) = x ^ (1 / 2), "\\(x: any) = x ^ (1 / 2)")
    assert(\(x: any) = x ^ 1 / 2, "\\(x: any) = x ^ 1 / 2")
    assert(\(x: any) = x ^ (1 + 2), "\\(x: any) = x ^ (1 + 2)")
    assert(\(x: any) = x ^ 1 + 2, "\\(x: any) = x ^ 1 + 2")
    assert(\(x: any) = 2 ^ (3 ^ x), "\\(x: any) = 2 ^ (3 ^ x)")
    assert(\(x: any) = (2 ^ 3) ^ x, "\\(x: any) = (2 ^ 3) ^ x")
    assert(\(x: any) = (1 / 2) ^ x, "\\(x: any) = (1 / 2) ^ x")
    assert(\(x: any) = 1 / 2 ^ x, "\\(x: any) = 1 / 2 ^ x")
    assert(\(x: any) = (1 / 2) * x, "\\(x: any) = 1 / 2 * x")
    assert(\(x: any) = 1 / 2 * x, "\\(x: any) = 1 / 2 * x")
    assert(\(x: any) = 1 / (2 * x), "\\(x: any) = 1 / (2 * x)")
    assert(\(x: any) = 1 * 2 / x, "\\(x: any) = 1 * 2 / x")
    assert(\(x: any) = (1 * 2) / x, "\\(x: any) = 1 * 2 / x")
    assert(\(x: any) = 1 * (2 / x), "\\(x: any) = 1 * (2 / x)")
    assert(\(x: any) = (2 + 3) * x, "\\(x: any) = (2 + 3) * x")
    assert(\(x: any) = 2 + 3 * x, "\\(x: any) = 2 + 3 * x")
    assert(\(x: any) = 2 + (3 * x), "\\(x: any) = 2 + 3 * x")
    assert(\(x: any) = 2 * 3 * x, "\\(x: any) = 2 * 3 * x")
    assert(\(x: any) = (2 * 3) * x, "\\(x: any) = 2 * 3 * x")
    assert(\(x: any) = 2 * (3 * x), "\\(x: any) = 2 * (3 * x)")
    assert(\(x: any) = 2 / 3 / x, "\\(x: any) = 2 / 3 / x")
    assert(\(x: any) = (2 / 3) / x, "\\(x: any) = 2 / 3 / x")
    assert(\(x: any) = 2 / (3 / x), "\\(x: any) = 2 / (3 / x)")
    assert(\(x: any) = 2 + 3 + x, "\\(x: any) = 2 + 3 + x")
    assert(\(x: any) = (2 + 3) + x, "\\(x: any) = 2 + 3 + x")
    assert(\(x: any) = 2 + (3 + x), "\\(x: any) = 2 + (3 + x)")
    assert(\(x: any) = 2 + 3 / x, "\\(x: any) = 2 + 3 / x")
    assert(\(x: any) = (2 + 3) / x, "\\(x: any) = (2 + 3) / x")
    assert(\(x: any) = 2 / 3 + x, "\\(x: any) = 2 / 3 + x")
    assert(\(x: any) = (2 / 3) + x, "\\(x: any) = 2 / 3 + x")
    assert(\(x: any) = 2 / (3 + x), "\\(x: any) = 2 / (3 + x)")
    assert(\(x: any) = (2 + 3) ^ x, "\\(x: any) = (2 + 3) ^ x")
    assert(\(x: any) = 2 + 3 ^ x, "\\(x: any) = 2 + 3 ^ x")
    assert(\(x: any) = x % 3 * 2, "\\(x: any) = x % 3 * 2")
    assert(\(x: any) = (x % 3) * 2, "\\(x: any) = x % 3 * 2")
    assert(\(x: any) = x % (3 * 2), "\\(x: any) = x % (3 * 2)")
    assert(\(x: any) = x % 3 % 2, "\\(x: any) = x % 3 % 2")
    assert(\(x: any) = (x % 3) % 2, "\\(x: any) = x % 3 % 2")
    assert(\(x: any) = x % (3 % 2), "\\(x: any) = x % (3 % 2)")
    assert(\(x: any) = x % 3 + 2, "\\(x: any) = x % 3 + 2")
    assert(\(x: any) = (x % 3) + 2, "\\(x: any) = x % 3 + 2")
    assert(\(x: any) = x % (3 + 2), "\\(x: any) = x % (3 + 2)")
    assert(\(x: any) = x % 3 / 2, "\\(x: any) = x % 3 / 2")
    assert(\(x: any) = (x % 3) / 2, "\\(x: any) = x % 3 / 2")
    assert(\(x: any) = x % (3 / 2), "\\(x: any) = x % (3 / 2)")
    assert(\(x: any) = 2 + 3 % x, "\\(x: any) = 2 + 3 % x")
    assert(\(x: any) = 2 + (3 % x), "\\(x: any) = 2 + 3 % x")
    assert(\(x: any) = (2 + 3) % x, "\\(x: any) = (2 + 3) % x")
    assert(\(x: any) = 2 - 3 % x, "\\(x: any) = 2 - 3 % x")
    assert(\(x: any) = 2 - (3 % x), "\\(x: any) = 2 - 3 % x")
    assert(\(x: any) = (2 - 3) % x, "\\(x: any) = (2 - 3) % x")
    assert(\(x: any) = 2 + 3 - x, "\\(x: any) = 2 + 3 - x")
    assert(\(x: any) = (2 + 3) - x, "\\(x: any) = 2 + 3 - x")
    assert(\(x: any) = 2 + (3 - x), "\\(x: any) = 2 + (3 - x)")
    assert(\(x: any) = 2 - 3 + x, "\\(x: any) = 2 - 3 + x")
    assert(\(x: any) = (2 - 3) + x, "\\(x: any) = 2 - 3 + x")
    assert(\(x: any) = 2 - (3 + x), "\\(x: any) = 2 - (3 + x)")
    assert(\(x: any) = 2 - 3 - x, "\\(x: any) = 2 - 3 - x")
    assert(\(x: any) = (2 - 3) - x, "\\(x: any) = 2 - 3 - x")
    assert(\(x: any) = 2 - (3 - x), "\\(x: any) = 2 - (3 - x)")
    assert(\(x: any) = 2 - 3 * x, "\\(x: any) = 2 - 3 * x")
    assert(\(x: any) = 2 - (3 * x), "\\(x: any) = 2 - 3 * x")
    assert(\(x: any) = (2 - 3) * x, "\\(x: any) = (2 - 3) * x")
    assert(\(x: any) = 2 * 3 - x, "\\(x: any) = 2 * 3 - x")
    assert(\(x: any) = (2 * 3) - x, "\\(x: any) = 2 * 3 - x")
    assert(\(x: any) = 2 * (3 - x), "\\(x: any) = 2 * (3 - x)")
    assert(\(x: any) = 2 / 3 - x, "\\(x: any) = 2 / 3 - x")
    assert(\(x: any) = (2 / 3) - x, "\\(x: any) = 2 / 3 - x")
    assert(\(x: any) = 2 / (3 - x), "\\(x: any) = 2 / (3 - x)")
    assert(\(x: any) = 2 - 3 / x, "\\(x: any) = 2 - 3 / x")
    assert(\(x: any) = 2 - (3 / x), "\\(x: any) = 2 - 3 / x")
    assert(\(x: any) = (2 - 3) / x, "\\(x: any) = (2 - 3) / x")
    assert(\(x: any) = 2 % 3 - x, "\\(x: any) = 2 % 3 - x")
    assert(\(x: any) = (2 % 3) - x, "\\(x: any) = 2 % 3 - x")
    assert(\(x: any) = 2 % (3 - x), "\\(x: any) = 2 % (3 - x)")
    assert(\(x: any) = x *. 3 + 2, "\\(x: any) = x *. 3 + 2")
    assert(\(x: any) = (x *. 3) + 2, "\\(x: any) = x *. 3 + 2")
    assert(\(x: any) = x *. (3 + 2), "\\(x: any) = x *. (3 + 2)")
    assert(\(x: any) = x *. 3 - 2, "\\(x: any) = x *. 3 - 2")
    assert(\(x: any) = (x *. 3) - 2, "\\(x: any) = x *. 3 - 2")
    assert(\(x: any) = x *. (3 - 2), "\\(x: any) = x *. (3 - 2)")
    assert(\(x: any) = x *. 3 * 2, "\\(x: any) = x *. 3 * 2")
    assert(\(x: any) = (x *. 3) * 2, "\\(x: any) = x *. 3 * 2")
    assert(\(x: any) = x *. (3 * 2), "\\(x: any) = x *. (3 * 2)")
    assert(\(x: any) = x *. 3 / 2, "\\(x: any) = x *. 3 / 2")
    assert(\(x: any) = (x *. 3) / 2, "\\(x: any) = x *. 3 / 2")
    assert(\(x: any) = x *. (3 / 2), "\\(x: any) = x *. (3 / 2)")
    assert(\(x: any) = x *. 3 % 2, "\\(x: any) = x *. 3 % 2")
    assert(\(x: any) = (x *. 3) % 2, "\\(x: any) = x *. 3 % 2")
    assert(\(x: any) = x *. (3 % 2), "\\(x: any) = x *. (3 % 2)")
    assert(\(x: any) = x * (1, 3) *. 2, "\\(x: any) = x * (1, 3) *. 2")
    assert(\(x: any) = (x * (1, 3)) *. 2, "\\(x: any) = x * (1, 3) *. 2")
    assert(\(x: any) = x * ((1, 3) *. 2), "\\(x: any) = x * ((1, 3) *. 2)")
    assert(\(x: any) = x / (1, 3) *. 2, "\\(x: any) = x / (1, 3) *. 2")
    assert(\(x: any) = (x / (1, 3)) *. 2, "\\(x: any) = x / (1, 3) *. 2")
    assert(\(x: any) = x / ((1, 3) *. 2), "\\(x: any) = x / ((1, 3) *. 2)")
    assert(\(x: any) = x / (1, 3) % 2, "\\(x: any) = x / (1, 3) % 2")
    assert(\(x: any) = (x / (1, 3)) % 2, "\\(x: any) = x / (1, 3) % 2")
    assert(\(x: any) = x / ((1, 3) % 2), "\\(x: any) = x / ((1, 3) % 2)")
    assert(\(x: any) = x % (1, 3) *. 2, "\\(x: any) = x % (1, 3) *. 2")
    assert(\(x: any) = (x % (1, 3)) *. 2, "\\(x: any) = x % (1, 3) *. 2")
    assert(\(x: any) = x % ((1, 3) *. 2), "\\(x: any) = x % ((1, 3) *. 2)")
    assert(\(x: any) = x x (1, 3) x (2, 3), "\\(x: any) = x x (1, 3) x (2, 3)")
    assert(\(x: any) = (x x (1, 3)) x (2, 3), "\\(x: any) = x x (1, 3) x (2, 3)")
    assert(\(x: any) = x x ((1, 3) x (2, 3)), "\\(x: any) = x x ((1, 3) x (2, 3))")
    assert(\(x: any) = x x (1, 3) + (2, 3), "\\(x: any) = x x (1, 3) + (2, 3)")
    assert(\(x: any) = (x x (1, 3)) + (2, 3), "\\(x: any) = x x (1, 3) + (2, 3)")
    assert(\(x: any) = x x ((1, 3) + (2, 3)), "\\(x: any) = x x ((1, 3) + (2, 3))")
    assert(\(x: any) = x x (1, 3) - (2, 3), "\\(x: any) = x x (1, 3) - (2, 3)")
    assert(\(x: any) = (x x (1, 3)) - (2, 3), "\\(x: any) = x x (1, 3) - (2, 3)")
    assert(\(x: any) = x x ((1, 3) - (2, 3)), "\\(x: any) = x x ((1, 3) - (2, 3))")
    assert(\(x: any) = x x (1, 3) / (2, 3), "\\(x: any) = x x (1, 3) / (2, 3)")
    assert(\(x: any) = (x x (1, 3)) / (2, 3), "\\(x: any) = x x (1, 3) / (2, 3)")
    assert(\(x: any) = x x ((1, 3) / (2, 3)), "\\(x: any) = x x ((1, 3) / (2, 3))")
    assert(\(x: any) = x x (1, 3) * (2, 3), "\\(x: any) = x x (1, 3) * (2, 3)")
    assert(\(x: any) = (x x (1, 3)) * (2, 3), "\\(x: any) = x x (1, 3) * (2, 3)")
    assert(\(x: any) = x x ((1, 3) * (2, 3)), "\\(x: any) = x x ((1, 3) * (2, 3))")
    assert(\(x: any) = x x (1, 3) % (2, 3), "\\(x: any) = x x (1, 3) % (2, 3)")
    assert(\(x: any) = (x x (1, 3)) % (2, 3), "\\(x: any) = x x (1, 3) % (2, 3)")
    assert(\(x: any) = x x ((1, 3) % (2, 3)), "\\(x: any) = x x ((1, 3) % (2, 3))")
    assert(\(x: any) = x * (1, 3) x (2, 3), "\\(x: any) = x * (1, 3) x (2, 3)")
    assert(\(x: any) = (x * (1, 3)) x (2, 3), "\\(x: any) = x * (1, 3) x (2, 3)")
    assert(\(x: any) = x * ((1, 3) x (2, 3)), "\\(x: any) = x * ((1, 3) x (2, 3))")
    assert(\(x: any) = x / (1, 3) x (2, 3), "\\(x: any) = x / (1, 3) x (2, 3)")
    assert(\(x: any) = (x / (1, 3)) x (2, 3), "\\(x: any) = x / (1, 3) x (2, 3)")
    assert(\(x: any) = x / ((1, 3) x (2, 3)), "\\(x: any) = x / ((1, 3) x (2, 3))")
    assert(\(x: any) = x % (1, 3) x (2, 3), "\\(x: any) = x % (1, 3) x (2, 3)")
    assert(\(x: any) = (x % (1, 3)) x (2, 3), "\\(x: any) = x % (1, 3) x (2, 3)")
    assert(\(x: any) = x % ((1, 3) x (2, 3)), "\\(x: any) = x % ((1, 3) x (2, 3))")

    /*
    f := \(x) = ((x + 2) > 3) && (x < 4)
    g := \(x) = x + 2 + 3
    println(f)
    println(g)
    println(\f(2))
    println(\g(2))
    */
}

fn assert(f: \(any) -> any, s: str) {
    if str(f) != s {
        println(link {
            "Expected `"s"`, found `"str(f)"`"
        })
    }
}
