_seps: "(){}[],.:;=<>*·+-/%^?~|&∧∨!¬∑∃∀\n\"\\"

200 multi_line_comment = ["/*" ..."*/"? .r?({
    [!"*/" "*" ..."*/"?] [multi_line_comment ..."*/"?] ["/" ..."*/"?]
}) "*/"]
201 comment = {multi_line_comment ["//" ..."\n"?]}
202 w = .r!({.w! comment})

0 ns = ["ns" .w! .s!("::" .._seps!:"name")]
1 uses = .l({[.w? use:"use"] comment})
2 use = ["use" .w! .s!(["::" !"{"] .._seps!:"name")
    ?["::" .w? "{" .w? .s?.(,
        [.._seps!:"use_fn" ?[.w! "as" .w! .._seps!:"use_fn_alias"]]
    ) .w? "}"]
    .w! "as" .w! .._seps!:"alias"]
3 fn = {
    ["fn" .w! .."("!:"name" ?w "(" ?w args ?w ")" ?w ?currents ?w {
            ["->":"returns" ?w ?type:"ret_type"]
            !"->":!"returns"
        } ?w block:"block"]
    [.."("!:"name" ?w "(" ?w args ?w ")" ?w ?currents ?w "=" ?w expr:"expr"]
}
4 args = .s?.(, arg:"arg")
5 arg = [?"mut":"mut" ?w .._seps!:"name" ?[?w ":" ?w
         ?["'" ?w .._seps!:"lifetime"] ?w ?type:"type"]]
6 imm_arg = [!"mut " .._seps!:"name" ?[?w ":" ?w !"'" ?type:"type"]]
7 closure = ["\\(" ?w .s?.(, imm_arg:"arg") ?w ")" ?w ?currents
             ?w "=" ?w expr:"expr"]
8 call_closure = ["\\" item:"item" ?w "(" .s?.(, arg_expr:"call_arg") ?w ")"]
9 named_call_closure = ["\\" item:"item" ?w "(" ?w
    .s?.(, [.._seps!:"word" ?w ":" ?w arg_expr:"call_arg" ?w]) ")"]
10 currents = ["~" ?w .s!.(, current:"current")]
11 current = [?"mut":"mut" ?w .._seps!:"name" ?[?w ":" ?w type:"type"]]
// Support both multi-line expressions and single line.
12 block = ["{" ?w {.l([?w expr:"expr" ?w]) [?w expr:"expr"]} ?w "}"]
13 expr = [{
    in:"in"
    closure:"closure"
    object:"object"
    arr
    ["return" wn expr:"return"]
    for_n:"for_n"
    for:"for"
    loop:"loop"
    if:"if"
    break:"break"
    continue:"continue"
    block:"block"
    assign:"assign"
    compare:"compare"
    ["return":"return_void"]
    add:"add"
    short_loops
    items
} try]
// Interprets "return" as variable, does not expect loops or assignment.
14 arg_expr = {
    ["mut":"mut" ?w item:"item"]
    swizzle:"swizzle"
    [{
        in:"in"
        closure:"closure"
        object:"object"
        arr
        if:"if"
        block:"block"
        compare:"compare"
        add:"add"
        short_loops
        items
    } try]
}
15 lexpr = [{
    closure:"closure"
    object:"object"
    arr
    short_loops
    block:"block"
    items
} try]
16 object = ["{" ?w .s?.(, key_value:"key_value") ?w "}"]
17 array = ["[" ?w .s?.(, expr:"array_item") ?w "]"]
18 array_fill = ["[" ?w expr:"fill" ?w ";" ?w expr:"n" ?w "]"]
19 key_value = [{.t?:"key" .._seps!:"key"} ?w ":" ?w expr:"val"]
20 num = .$_:"num"
21 vec4 = ["(" ?w arg_expr:"x" , ?arg_expr:"y"
           ?[, arg_expr:"z" ?[, arg_expr:"w"]] ?, ?w ")"]
22 color = ["#" .._seps!:"color"]
23 text = .t?:"text"
24 bool = [{"true":"bool" "false":!"bool"} !.._seps!]
25 unop_not = [{"!":"!" "¬":"!"} ?w lexpr:"expr"]
26 unop_neg = ["-":"-" ?w mul_expr:"expr"]
27 norm = ["|" ?w expr:"expr" ?w "|"]
28 item = [?"~":"current" ?w .._seps!:"name" ?[?w "?":"try_item"]
    ?item_extra:"item_extra"]
29 item_extra = .r!([{
           [?w "[" ?w {.t?:"id" .$_:"id" expr:"id"} ?w "]"]
           [?w "." ?w .._seps!:"id"]} ?[?w "?":"try_id"]])
30 link = ["link" ?w "{" ?w link_body "}"]
31 link_body = .s?.(?w expr:"link_item")
// Generate link block for body.
32 link_for = [label "link" .w! .s!.(, [.._seps!:"name" ?w
    ?{
        ["[" ?w expr:"start" , expr:"end" ?w ")"]
        [!"{" expr:"end"]
    }]) ?w "{" ?w link_body_block:"block" "}"]
33 link_body_block = link_body_expr:"expr"
34 link_body_expr = link_body:"link"
35 for = [label "for" .w!
    expr:"init" ?w ";" ?w
    expr:"cond" ?w ";" ?w
    expr:"step" ?w block:"block"]
36 for_n = [label "for" short_body]
37 loop = [label "loop" .w!  block:"block"]
38 break = ["break" ?w ?["'" .._seps!:"label"]]
39 continue = ["continue" ?w ?["'" .._seps!:"label"]]
40 if = ["if" .w! expr:"cond" ?w block:"true_block"
         .r?([?w "else" w "if" ?w expr:"else_if_cond" ?w block:"else_if_block"])
         ?[?w "else" ?w block:"else_block"]]
41 call = [?[.._seps!:"alias" "::"] .._seps!:"name" wn "(" ?w
    .s?.(, arg_expr:"call_arg") ?w ")"]
42 named_call = [?[.._seps!:"alias" "::"] .._seps!:"word" wn "(" ?w
    .s?.(, [.._seps!:"word" ?w ":" ?w arg_expr:"call_arg" ?w]) ")"]
43 go = ["go " ?w {call:"call" named_call:"named_call"}]
44 assign = [lexpr:"left" ?w assign_op ?w expr:"right"]
45 assign_op = {":=":":=" "=":"=" "+=":"+=" "-=":"-=" "*=":"*=" "/=":"/=" "%=":"%="}
46 compare = [lexpr:"left" ?w compare_op ?w expr:"right"]
47 compare_op = {"==":"==" "!=":"!=" "¬=":"!=" "<=":"<=" "<":"<" ">=":">=" ">":">"}
48 grab = ["grab" ?[w "'" .$:"grab_level"] w expr:"expr"]
49 try_expr = ["try" w expr:"expr"]
50 in = ["in" w ?[.._seps!:"alias" "::"] .._seps!:"name"]

60 label = ?["'" .._seps!:"label" ?w ":" ?w]
61 short_body = [.w! .s!.(, [.._seps!:"name" ?w
    ?{
        ["[" ?w expr:"start" , expr:"end" ?w ")"]
        [!"{" expr:"end"]
    }]) ?w block:"block"]
62 try = ?[?w "?":"try"]
63 , = [?w "," ?w]
64 arr = {array:"array" array_fill:"array_fill"}
65 items = {vec4:"vec4" link:"link" grab:"grab" try_expr:"try_expr"
            ["(" ?w expr ?w ")"] unop_not:"unop" norm:"norm"
            text go:"go"
            call_closure:"call_closure" named_call_closure:"named_call_closure"
            call:"call" named_call:"named_call"
            num bool color item:"item"}
// Allow whitespace, but no new line.
66 wn = .r?({" " "\t" "\r"})

70 short_loops = {sum:"sum" prod:"prod" sum_vec4:"sum_vec4"
    prod_vec4:"prod_vec4" min:"min" max:"max" sift:"sift"
    any:"any" all:"all" vec4_un_loop:"vec4_un_loop" link_for:"link_for"}
71 sum = [label {"sum" "∑"} short_body]
72 prod = [label {"prod" "∏"} short_body]
73 min = [label "min" short_body]
74 max = [label "max" short_body]
75 sift = [label "sift" short_body]
76 any = [label {"any" "∃"} short_body]
77 all = [label {"all" "∀"} short_body]
78 sum_vec4 = [label {"sum_vec4" "∑vec4"} short_body]
79 prod_vec4 = [label {"prod_vec4" "∏vec4"} short_body]
80 vec4_un_loop = ["vec" {"4":"4" "3":"3" "2":"2"}
                   w .._seps!:"name" w expr:"expr"]
81 swizzle = [sw:"sw0" sw:"sw1" ?sw:"sw2" ?sw:"sw3" w expr:"expr"]
82 sw = {"x":"x" "y":"y" "z":"z" "w":"w"}

90 type = {
    "any":"any"
    "bool":"bool"
    "f64":"f64"
    "str":"str"
    "vec4":"vec4"
    "link":"link"
    ["opt" ?w "[" ?w type:"opt" ?w "]"]
    "opt":"opt_any"
    ["res" ?w "[" ?w type:"res" ?w "]"]
    "res":"res_any"
    ["sec" ?w "[" ?w {"bool":"sec_bool" "f64":"sec_f64"} ?w "]"]
    "[]":"arr_any"
    ["[" ?w type:"arr" ?w "]"]
    "{}":"obj_any"
    ["thr" ?w "[" ?w type:"thr" ?w "]"]
    "thr":"thr_any"
    closure_type:"closure_type"
    [.._seps!:"ad_hoc" ?[?w type:"ad_hoc_ty"]]
}
91 closure_type = ["\\(" ?w .s?.(, type:"cl_arg") ?w ")"
    ?w "->" ?w type:"cl_ret"]

100 + = [?w {"+":"+" "||":"||" "∨":"+" ["or":"+" w]} ?w]
101 - = [wn "-":"-" ?w]
// Allow whitespace before multiplication sign, but no new line.
// This prevents `x` on a new line from being interpreted as multiplication sign.
102 * = [wn {
    "*.":"*." "·":"*."
    ["x":"x" w] "⨯":"x"
    "*":"*" "&&":"&&" "∧":"*" ["and":"*" w]
} ?w]
103 / = [?w "/":"/" ?w]
104 % = [?w "%":"%" ?w]
105 pow = [lexpr:"base" ?w "^" ?w lexpr:"exp"]
106 mul = .s!({* / %} {unop_neg:"unop" pow:"pow" lexpr:"val"})
107 mul_expr = {mul:"mul"}
108 add = .s!({+ -} mul_expr:"expr")

1000 document = [?ns:"ns" ?w ?uses:"uses" ?w .l({[.w? fn:"fn"] comment})]
