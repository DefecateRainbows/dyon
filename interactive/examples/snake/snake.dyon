title() = "Snake!"

fn init() {
    functions := unwrap(load("../common/functions.dyon"))
    list := functions()
    println("===================")
    println("External functions:")
    println("===================")
    call(functions, "print_functions_type", [list, "external"])
    println("===================")
    println("Loaded functions:")
    println("===================")
    call(functions, "print_functions_type", [list, "loaded"])
    println("===================")
}

settings() = {
    background_color: #e5d6a1,
    reload_interval: 0.25,
    reload_key: 1073741882, // F1
    reset_key: 114, // R
    snake_parts: 100,
    snake_parts_size: 5,
    snake_trail: 10,
    turn_left: 97, // A
    turn_right: 100, // D,
    turn_speed: 5,
    speed: 50,
    focus_speed: 1,
    unfocus_speed: .1,
}

fn init_data(settings: Settings) -> Data {
    data := {
        snake_body: init_snake_body(
            parts: settings.snake_parts,
            size: settings.snake_parts_size
        ),
        snake_angle: 1,
        pressing_left: false,
        pressing_right: false,
        focused: true,
    }
    data.next_snake_body := clone(data.snake_body)
    return clone(data)
}

fn init_snake_body__parts_size(parts: f64, size: vec4) -> [] {
    body := []
    // end := [(parts - 1) * size, (parts - 1) * size]
    end := (0, 0)
    for i parts {
        push(mut body, end - i * size)
    }
    return clone(body)
}

fn render() ~ settings: Settings, data: Data {
    radius := 20
    offset := 1
    n := len(data.snake_body)
    ~ draw_list := []
    clear(color: settings.background_color)
    for i n-1 {
        line(color: #29271f, radius: 1,
             from: data.snake_body[i+1], to: data.snake_body[i])
    }
    for i n {
        pos := data.snake_body[i]
        circle(color: #000000, center: pos, radius: radius)
    }
    if n > 0 {
        dir_len := 20
        pos := data.snake_body[0]
        dir := dir(angle: data.snake_angle)
        pos2 := pos + dir * dir_len
        line(color: #1510dc, radius: 1, from: pos, to: pos2)
    }

    normal := #3864b2
    laser := #b02525

    walls := [
        [normal, (100, 0), (200, 100)],
        [normal, (200, 100), (200, 200)],
        [normal, (300, 100), (300, 200)],
        [laser, (300, 200), (400, 200)]
    ]

    for i len(walls) {
        line(color: walls[i][0], radius: 5, from: walls[i][1], to: walls[i][2])
    }

    text(font: 0, color: #004400, size: 60, pos: (250, 80), string: "Hello!")

    font_names := font_names()
    if len(font_names) == 2 {
        _ := unwrap(load_font("../../assets/Hack-Regular.ttf"))
    }

    draw(draw_list)
}

fn update(dt: f64) ~ mut data: Data, settings: Settings {
    if data.pressing_left {
        data.snake_angle -= settings.turn_speed * dt
    }
    if data.pressing_right {
        data.snake_angle += settings.turn_speed * dt
    }
    // Update snake body.
    for i len(data.snake_body) {
        pos := data.snake_body[i]
        speed := dt * settings.speed
        dir := if i == 0 {
                dir(angle: data.snake_angle)
            } else {
                prev_pos := data.snake_body[i - 1]
                diff := prev_pos - pos
                len := |diff|
                if len > settings.snake_parts_size {
                    diff / len
                } else {
                    (0, 0)
                }
            }
        data.next_snake_body[i] = pos + dir * speed
    }
    data.snake_body = clone(data.next_snake_body)
}
